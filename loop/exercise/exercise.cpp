#include <iostream>
#include <iomanip>

using std::cout;
using std::cin;
using std::endl;
using std::fixed;
using std::setprecision;


//----------------sum of n--------------------------------------//
/*
1.  Write a program to calculate the sum of $.01 a day, doubled for n number of days. For example, on the first day you would receive $.01; on the second day you would receive $.02, for a total of $.03. On the third day you would receive $.04, for a total of $.07. Get the input for the number of days from the user, but make sure it is between 1 and 30 days. Display the number of cents accumulated, along with the number of days entered by the user.

Input:
"Prompt teh user to ender the number of days:  "
read number_of_days

Constants:
INITIAL_SUM = 0.01

Process:

declare and initialize addend as .01;
declare and initialize sum as 0;

validate the number is between 1 and 30
if (n > 0 && n < 31) 
{
for(int i = 0; i < number_of_days; i++)
add addend to sum to get new sum for first iteration
increment addend by multiplying by 2
} else 
{
  display error message that day entered is not valid
}


Output:
Display the sum after n days is xx
*/

void sum_over_days()
{
  float const INITIAL_SUM = 0.01;
  float addend = 0.01;
  float sum = 0.0;
  int number_of_days = 0;

  cout << "Enter the number of days: ";
  cin >> number_of_days;

  if(number_of_days > 0 && number_of_days < 31)
  {
     for(int i = 0; i < number_of_days; i++)
    {
      sum += addend;
      addend *= 2;
    }
    cout << "for " << number_of_days << " days, the sum is: " 
          << fixed << setprecision(2) << sum << endl;
  } else 
  {
    cout << "The day entered is not a valid number of days \n";
  }
 
}



/*
2.  Write a program that calculates the factorial of a user-defined number. For example, 5! = 1 * 2 * 3 * 4 * 5 = 120. The “!” is the mathematical notation for factorial. Because factorials get very large very quickly, limit the input to a maximum of 25 and a minimum of 2.

Input:
Prompt user to enter a chosen number from 2 - 25
read number entered

Constants:

Process:
double factorial = 1
for(int i = 1; i <= chosen_number; i++)
{
  factorial *= (i + 1)
}

Output:
display to screen that the factorial of chosen_number = factorial
*/

void find_factorial(int chosen_number)
{
double factorial = 1;
for(int i = 1; i < chosen_number; i++)
  {
    factorial *= (i + 1);
  }

  cout << "The factorial of " << chosen_number <<" is " << factorial << "\n";
}
/*
3.  Write a program to generate a Fibonacci sequence up to a user-specified ending number. For example, if the user entered 25, the Fibonacci sequence would be:   1, 1, 2, 3, 5, 8, 13, 21
Notice that after the initial two numbers, each new number is generated by adding the previous two numbers.

process:

target_number = 0;
previous_number = 1
current_number = 1
temp_number = 0
display previous_number
display current_number

while current_number <= target_number

temp_number = current_number
current_number += previous_number

if(current)number <= target_number)
 {
   display current_number
  previous_number = temp_number
}

*/

void print_fibonacci(int target_number)
{
  int previous_number = 1;
  int current_number = 1;
  int temp_number = 0;

  cout << previous_number << ", \n";
  cout << current_number << " , \n"; 

  while(current_number <= target_number)
  {
    temp_number = current_number;
    current_number += previous_number;

    if(current_number <= target_number)
    {
      cout << current_number << ", \n";
      previous_number = temp_number;
    }

  }
}

/*
4.  Write a program that takes input from the user that represents a numerator and a denominator of a fraction. Then reduce the fraction to its lowest terms and display it to the screen. If appropriate, display the fraction as a mixed number (3 1/2).

To reduce a fraction to its lowest terms, divide both the numerator and the denominator by the greatest common denominator. The GCD can be calculated by using Euclid's algorithm. Euclid's algorithm states: Let m represent the numerator and n represent the denominator of a fraction. Divide m by n. Save the divisor in m and save the remainder in n. If n is 0, then stop: m contains the GCD. Otherwise, repeat the process.

Be sure to display the fraction in a well-formed manner. If the denominator is a one, display the fraction as a whole number. If the denominator is a zero, display a message that the fraction is undefined. A fraction will never be displayed with a negative denominator.
*/

/*
5.  Write a program that displays the ASCII chart. Display numeric values as well as characters so that there are four columns and as many rows as it takes. For an extra challenge, display the chart so that its outside borders are made up of double line ASCII characters, and separate each column with a single vertical ASCII character.
*/

int main(){
  void sum_over_days();
  void find_factorial(int chosen_number);
  void print_fibonacci(int target_number);

// const float A_GRADE = 92.0;
// const float B_GRADE = 84.0;
// const float C_GRADE  = 75.0;
// const float D_GRADE  = 65.0;
// float average_test_score = 0;
// float test_score_1 = 0;
// float test_score_2 = 0;
// float test_score_3 = 0;
// int student_id = 0;
// float number_of_students = 20;
// int score_sums_all_students = 0;
// char again = '\0';
// float number_of_students_entered = 0;


// do
// {
//   cout << "Enter you 5 digit student ID number: ";
//   cin >> student_id;
//   cout << "Enter your first test score: ";
//   cin >> test_score_1;
//   cout << "Enter your second test score: ";
//   cin >> test_score_2;
//   cout << "Enter your third test score:  ";
//   cin >> test_score_3;

//   average_test_score = (test_score_1 + test_score_2 + test_score_3) / 3;
//   score_sums_all_students += average_test_score;

//   if(average_test_score >= A_GRADE)
//   {
//     cout << "Your final grade is A" << endl;
//   }
//   else if (average_test_score >= B_GRADE)
//   {
//       cout << "Your final grade is B" << endl;
//   }
//   else if (average_test_score >= C_GRADE)
//   {
//       cout << "Your final grade is C" << endl;
//   }
//   else if (average_test_score >= D_GRADE)
//   {
//       cout << "Your final grade is D" << endl;
//   }
//   else
//   {
//       cout << "Your final grade is F" << endl;
//   }
//   number_of_students_entered++;
  
//   cout << "Do you want to enter another students test scores (y/n): ";
//   cin >> again;
// } while(again == 'y' || again == 'Y');

// cout << "The class average score is: " 
//       << score_sums_all_students / number_of_students_entered << "\n"
//       <<"The number of students in the class is: " << number_of_students_entered << endl;

// sum_over_days();


// int chosen_number = 0;
// cout << "Enter a number between (2 -25) that you want to find the factorial for: ";
// cin >> chosen_number;
// find_factorial(chosen_number);

int target_number = 0;
cout << "Enter the target number you want Fibonacci series for: ";
cin >> target_number;
print_fibonacci(target_number);

return 0;
}